# **Proyek 1 Metode Numerik Kelas A**
# Anggota Kelompok Proyek 1:
# 1. C14210022 - Calvin Anantha
# 2. C14210016 - Michael Adi Pratama
# 3. C14210104 - Timothy Jeremy
# 4. C14210251 - Markus Nugraha. S
# 5. C14210144 - Billy Emanoel

# 1. Naive Gauss Elimination
import numpy as np

def gauss_elimination(x, y):
    n = len(y)

    # Matriks gabungan [x |y]
    xy = np.concatenate((x.astype(float), y.reshape(n, 1).astype(float)), axis=1)
    
    for i in range(n):
        # Mencari baris dengan elemen terbesar pada kolom i
        max_row = i
        for j in range(i+1, n):
            if abs(xy[j, i]) > abs(xy[max_row, i]):
                max_row = j

        # Menukar baris maksimum dengan baris i
        xy[[i, max_row], :] = xy[[max_row, i], :]

        # Eliminasi Gauss
        for j in range(i+1, n):
            ratio = xy[j, i] / xy[i, i]
            xy[j, :] -= ratio * xy[i, :]
            
    # Substitusi mundur
    z = np.zeros(n)
    for i in range(n-1, -1, -1):
        z[i] = (xy[i, -1] - np.dot(xy[i, :-1], z)) / xy[i, i]
    
    return z

# **Contoh Penggunaan Naive Gauss Elimination pada Matrix:**
# Deklarasi Matrix:
x = np.array([[0.02,0.01,0,0], [1,2,1,0], [0,1,2,1],[0,0,100,200]])
y = np.array([0.02,1,4,800])

# Naive Gauss Elimination
naive_gauss_elim = gauss_elimination(x,y)
print("Naive Gauss Elimination: ", naive_gauss_elim)

# **Contoh Penggunaan Naive Gauss Elimination pada Matrix Lainnya:**
# Deklarasi Matrix:
x = np.array([[1,2,3], [4,5,6], [7,8,9]])
y = np.array([6,15,24])

# Naive Gauss Elimination
naive_gauss_elim = gauss_elimination(x,y)
print("Naive Gauss Elimination: ",naive_gauss_elim)



# 2. Naive Gauss Elimination With Pivoting
import numpy as np

def gauss_elimination_pivot(x, y):
    n = len(y)
    
    # Matriks gabungan [x |y]
    xy = np.concatenate((x.astype(float), y.reshape(n, 1).astype(float)), axis=1)
    
    for i in range(n):
        # Pivoting
        max_row = i
        max_val = abs(xy[i, i])
        for j in range(i+1, n):
            if abs(xy[j, i]) > max_val:
                max_row = j
                max_val = abs(xy[j, i])
        
        xy[[i, max_row], :] = xy[[max_row, i], :]
        
        # Eliminasi Gauss
        for j in range(i+1, n):
            ratio = xy[j, i] / xy[i, i]
            xy[j, :] -= ratio * xy[i, :]
    
    # Substitusi mundur
    z = np.zeros(n)
    for i in range(n-1, -1, -1):
        z[i] = (xy[i, -1] - np.dot(xy[i, :-1], z)) / xy[i, i]
    
    return z

# **Contoh Penggunaan Gauss Elimination Pivoting pada Matrix:**
# Deklarasi Matrix:
x = np.array([[0.02,0.01,0,0], [1,2,1,0], [0,1,2,1],[0,0,100,200]])
y = np.array([0.02,1,4,800])

# Naive Gauss Elimination With Pivoting
naive_gauss_pivot = gauss_elimination_pivot(x,y)
print("\nNaive Gauss Elimination With Pivoting:", naive_gauss_pivot)

# **Contoh Penggunaan Gauss Elimination Pivoting pada Matrix Lain:**

# Deklarasi Matrix:
x = np.array([[1,2,3], [4,5,6], [7,8,9]])
y = np.array([6,15,24])

# Naive Gauss Elimination With Pivoting
naive_gauss_pivot = gauss_elimination_pivot(x,y)
print("\nNaive Gauss Elimination With Pivoting:", naive_gauss_pivot)



# 3. Determinant Naive Gauss Elimination
import numpy as np

def det_gauss_elimination_pivot(x):
    z = len(x)
    
    xy = x.astype(float)
    det_sign = 1.0  # Untuk melacak perubahan tanda determinan
    
    for i in range(z):
        # Pivoting
        max_row = i
        max_val = abs(xy[i, i])
        for j in range(i+1, z):
            if abs(xy[j, i]) > max_val:
                max_row = j
                max_val = abs(xy[j, i])
        
        if max_row != i:
            xy[[i, max_row], :] = xy[[max_row, i], :]
            det_sign *= -1.0  # Mengubah tanda determinan setelah pertukaran baris
        
        # Eliminasi Gauss
        for j in range(i+1, z):
            ratio = xy[j, i] / xy[i, i]
            xy[j, :] -= ratio * xy[i, :]
    
    # Menghitung determinan
    det = det_sign
    for i in range(z):
        det *= xy[i, i]
    
    return det

# **Contoh Penggunaan Determinant Naive Gauss Elimination pada Matrix:**
# Deklarasi Matrix:
x = np.array([[0.02,0.01,0,0], [1,2,1,0], [0,1,2,1],[0,0,100,200]])

# Determinant Naive Gauss Elimination:
determinant = det_gauss_elimination_pivot(x);
# round untuk pembulatan nilai determinant
print("\nDeterminan Naive Gauss Elimination:", round(determinant));

# **Contoh Penggunaan Determinant Naive Gauss Elimination pada Matrix Lain:**
# Deklarasi Matrix:
x = np.array([[1,2,3], [4,5,6], [7,8,9]])

# Determinant Naive Gauss Elimination:
determinant = det_gauss_elimination_pivot(x);
# round untuk pembulatan nilai determinant
print("\nDeterminan Naive Gauss Elimination:", round(determinant));
